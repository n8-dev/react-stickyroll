{"docs":{"id":"root","children":[{"id":"doc/index","contents":"---\nname: \"doc\"\ndescription: \"Reference for Stickyroll\"\ndisplayName: \"Reference\"\noptions:\n  order: 1\n  query: tag=Reference AND is=doc\n---\n","contentType":"doc","path":"doc/index.md","manifest":{"name":"doc","displayName":"Reference","description":"Reference for Stickyroll","flag":"alpha","options":{"order":1,"query":"tag=Reference AND is=doc"},"tags":[],"version":"1.0.0"},"rawManifest":{"name":"doc","description":"Reference for Stickyroll","displayName":"Reference","options":{"order":1,"query":"tag=Reference AND is=doc"}}},{"id":"doc/stickyroll","contents":"---\ndisplayName: \"Reference: Stickyroll\"\ndescription: \"Detailed API documentation of the Stickyroll component\"\ntags: \n - Reference\noptions:\n  order: 0\n---\n\n# Stickyroll\n\n## Install\n\n```bash\nyarn add @stickyroll/stickyroll\n```\n\n## Import\n\n```js\nimport {Stickyroll} from \"@stickyroll/stickyroll\";\n```\n\n## Types\n\n`Stickyroll` is an alias of `Frame`. They therefore use the same types.\n \n**Properties**\n\n```typescript\n/**\n * @typedef {object} IFrameProps\n * @extends {IFrameDefaultProps}\n * @property {string} [anchors]\n * @property {TChild} [children]\n * @property {string} [className]\n * @property {number} [factor]\n * @property {TPageHandler} [onPage]\n * @property {number|Array<any>} pages\n * @property {TRenderer} [render]\n * @property {number} [throttle]\n */\nexport interface IFrameProps {\n    anchors?: string;\n    children?: TChild;\n    className?: string;\n    factor?: number;\n    onEnd?: TProgressHandler | TAsyncProgressHandler;\n    onPage?: TPageHandler | TAsyncPageHandler;\n    onStart?: TProgressHandler | TAsyncProgressHandler;\n    pages: number | Array<any>;\n    render?: TRenderer;\n    throttle?: number;\n}\n```\n\n**Declarations**\n\n```typescript\nimport { IContext } from \"@stickyroll/context\";\n/**\n * @typedef {function} TRender<T>\n * @param {IContext} context\n * @returns {T}\n */\nexport declare type TRender<T> = (context: IContext) => T;\n/**\n * @typedef {TRender<any>} TRenderer\n * @param {IContext} context\n * @returns {any}\n */\nexport declare type TRenderer = TRender<any>;\n/**\n * @typedef {TRender<any>} TChild\n * @param {IContext} context\n * @returns {any}\n */\nexport declare type TChild = TRender<any>;\n/**\n * @typedef {function} TPageHandler\n * @param {number} page\n * @returns {void}\n */\nexport declare type TPageHandler = (page: number) => void;\n/**\n * @typedef {function} TAsyncPageHandler\n * @param {number} page\n * @returns {Promise<void>}\n */\nexport declare type TAsyncPageHandler = (page: number) => Promise<void>;\n/**\n * @typedef {function} TProgressHandler\n * @returns {void}\n */\nexport declare type TProgressHandler = () => void;\n/**\n * @typedef {function} TAsyncProgressHandler\n * @returns {Promise<void>}\n */\nexport declare type TAsyncProgressHandler = () => Promise<void>;\n/**\n * @typedef {object} IFrameDefaultProps\n * @property {number} factor\n */\nexport interface IFrameDefaultProps {\n    factor: number;\n}\n```\n\n","contentType":"doc","path":"doc/stickyroll.md","manifest":{"name":"stickyroll","displayName":"Reference: Stickyroll","description":"Detailed API documentation of the Stickyroll component","flag":"alpha","options":{"order":0},"tags":["Reference"],"version":"1.0.0"},"rawManifest":{"displayName":"Reference: Stickyroll","description":"Detailed API documentation of the Stickyroll component","tags":["Reference"],"options":{"order":0}}},{"id":"guide/configue-stickyroll/Readme","contents":"---\ndisplayName: \"Guide: Configure Stickyroll\"\ndescription: \"Modify the behavior of Stickyroll.\"\ntags: \n - Guide\noptions:\n  order: 1\n---\n\n# When the default behavior is not enough.\n\n> :timer_clock: **Time invest**: 5 Minutes ––– :woman_student: **Level**: Beginner\n\n## What to expect\n\nEvery application can have several use cases for Stickyroll. With some basic options we can modify\nthe behavior of the scroll listener.\nIn about 5 minutes we will explore the `factor`, `throttle` and `anchors` properties.\n\nWe will …\n\n* … Change the scroll factor\n* … Use throttle to improve performance\n* … Add anchors to allow deep linking to a page\n\n## You'll need\n\n* :computer: Terminal (MacOS: `Terminal.app` or [iTerm](https://www.iterm2.com/) | Windows: [cmder](http://cmder.net/))\n* :turtle: Node.js `>=8` ([Install](https://nodejs.org/en/))\n* :woman_student: The app from \"Getting started\"\n\n## Using Options to modify Stickyroll\n\nFollow these 3 simple steps to learn all the possibilities.\n\n### 1. Change the factor\n\nTo change the amount, a user has to scroll to progress though the view can be configured.\nIn this example we want to double the amount so the timeline is longer.\n\nWe have add an attribute to `Stickyroll`.\n\n```jsx\n<Stickyroll page={headlines} factor={2}/>\n```\n\nPlay around with this option until you have the effect that suits you best.\n\n### 2. Add throttle\n\nSometimes performance is more important than smooth animations.\nWhile Stickyroll already uses `requestAnimationFrame` internally on top of a\npassive `eventListener`, performance should not be an issue. Obviously the internal logic of your\napplication has the most impact.\n\nLet's pretend to have a case where we can to throttle the scroll to `250ms`.  \nIf all we do on scroll is trigger a className at a certain progress, then `throttle`\nmight do exactly what we want.\n\nWe have add an attribute to `Stickyroll`.\n\n```jsx\n<Stickyroll page={headlines} factor={2} throttle={250}/>\n```\n\nand change the className of our content container based on the progress.  \nLets add `custom-trigger--${Math.round(progress * 3)}` to add 3 classNames\nwhile scrolling\n\n* \"custom-trigger--0\"  (Start of page)\n* \"custom-trigger--...\"\n* \"custom-trigger--3\" (End of page)\n\n```html\n<div className={`custom-trigger--${Math.round(progress * 3)}`}/>\n```\n\nYou can add these Styles to your stylesheet if you want to see some action:\n\n> :information_source: \n> You can use [styled-components](https://www.styled-components.com/) or a similar library\n> to add these styles for you.  \n> To keep things simple we will just add them to the `document.head` manually\n\n```js\nArray(4).fill(Boolean).map((x, i) => `\n\t.custom-trigger {\n\t\ttransition: background-color 0.3s ease-in-out;\n\t}\n\t.custom-trigger--${i} {\n\t\tbackground-color: hsl(${i * 36}, 100%, 70%);\n\t}\n`);\n```\n\nOpen the file `my-app/src/App.css` in your text editor and add this\ncss snippet\n\n```css\n.custom-trigger {\n\ttransition: background-color 0.3s ease-in-out;\n}\n.custom-trigger--0{\n\tbackground-color:hsl(0,100%,70%);\n}\n.custom-trigger--1{\n\tbackground-color:hsl(120,100%,70%);\n}\n.custom-trigger--2{\n\tbackground-color:hsl(240,100%,70%);\n}\n.custom-trigger--3{\n\tbackground-color:hsl(360,100%,70%);\n}\n```\n\n> :information_source: \n> Throttle will improve performance but return a stuttering `progress`.\n\n### 3. Adding deep links\n\nTo allow linking directly to pages we can inject elements with target IDs.\nWhile you are free to build your own Logic for this, Stickyroll already provides\na solution that nicely ties into the mechanism.\n\nWe have to add an attribute to `Stickyroll`.\n\n```jsx\n<Stickyroll page={headlines} anchors=\"\"/>\n```\n\nSetting `anchors` injects elements with corresponding IDs to allow hash navigation.\n\n**Examples:**\n\n* `\"\"` => \"example.com#1\"\n* `\"examples\"` => \"example.com#examples/1\"\n* `\"!\"` => \"example.com#!/1\"\n* `\"!/examples\"` => \"example.com#!/examples/1\"\n\n\nYour `App.js` should now look like this:\n\n```jsx\nimport React from 'react';\nimport {Stickyroll} from '@stickyroll/stickyroll';\n\nconst headlines = [\n\t\"Hello World!\",\n\t\"Hello React!\",\n\t\"Hello Stickyroll!\",\n\t\"Let's continue with the next lesson!\"\n]\n\nconst App = () => {\n\tconst className = progress =>\n\t\t`custom-trigger custom-trigger--${Math.round(progress * 3)}`\n\treturn (\n\t\t<Stickyroll\n\t\t\tpages={headlines}\n\t\t\tfactor={2}\n\t\t\tthrottle={250\n\t\t\tanchors=\"\">\n\t\t\t{({page, pageIndex, pages, progress}) => {\n\t\t\t\treturn (\n\t\t\t\t<div\n\t\t\t\t\tclassName={className(progress)}/>\n\t\t\t\t\t<strong>{page}</strong> of <strong>{pages}</strong>\n\t\t\t\t\t<br/>\n\t\t\t\t\tProgress: <strong>{progress}</strong>\n\t\t\t\t\t<h1>{headlines[pageIndex]}</h1>\n\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}}\n\t\t</Stickyroll>\n\t)\n};\n\nexport default App;\n```\n\nYour `App.css` should now look like this:\n\n```css\n.App {\n  text-align: center;\n}\n\n.App-logo {\n  animation: App-logo-spin infinite 20s linear;\n  height: 40vmin;\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.custom-trigger {\n  transition: background-color 0.3s ease-in-out;\n}\n.custom-trigger--0{\n  background-color:hsl(0,100%,70%);\n}\n.custom-trigger--1{\n  background-color:hsl(120,100%,70%);\n}\n.custom-trigger--2{\n  background-color:hsl(240,100%,70%);\n}\n.custom-trigger--3{\n  background-color:hsl(360,100%,70%);\n}\n```\n\nEnjoy!\n\n## Next steps\n\nThese options are fully optional. It's noe time to take a step to the next level\nand explore more internal features of Stickyroll.\n\n\nIf anything is missing or seems unclear feel free to open an issue \nin our [github repo](https://github.com/stickyroll/react-stickyroll/issues).\n\n**Thank you**\n","contentType":"doc","path":"guide/configue-stickyroll/Readme.md","manifest":{"name":"when-the-default-behavior-is-not-enough-","displayName":"Guide: Configure Stickyroll","description":"Modify the behavior of Stickyroll.","flag":"alpha","options":{"order":1},"tags":["Guide"],"version":"1.0.0"},"rawManifest":{"displayName":"Guide: Configure Stickyroll","description":"Modify the behavior of Stickyroll.","tags":["Guide"],"options":{"order":1}}},{"id":"guide/creating-plugins/Readme","contents":"---\ndisplayName: \"Guide: Creating Plugins\"\ndescription: \"Plugins can interact with your Stickyroll.\"\ntags: \n - Guide\noptions:\n  order: 3\n---\n\n# It's time to learn something about navigation.\n\n> :timer_clock: **Time invest**: 10 Minutes ––– :woman_student: **Level**: Intermediate\n\n## What to expect\n\nInteracting with timeline based libraries can be tricky. Learn how Stickyroll uses\nhash-links to allow easy navigation.\nIn about 10 minutes we will build a small Skip Component that allows us to skip the entire view.\n\nWe will …\n\n* … install an additional stickyroll package\n* … create a new file with a component\n* … add the component to our existing app\n\n## You'll need\n\n* :computer: Terminal (MacOS: `Terminal.app` or [iTerm](https://www.iterm2.com/) | Windows: [cmder](http://cmder.net/))\n* :turtle: Node.js `>=8` ([Install](https://nodejs.org/en/))\n* :woman_student: The app from \"Using Decorators\"\n\n## Building plugins with context and utils\n\nFollow these 3 simple steps to build your first Plugin.\n\n### 1. Installing Utils\n\nWhile in your app folder `my-app`, run a single command:\n\n```shell\nnpm install --save @stickyroll/utils\n```\n\n### 2. Creating a Plugin\n\nCreate a file `my-app/src/Skip.js` in your text editor and paste this code.\nThis creates a simple Link that allows users to skip the entire Content.  \n\n> :information_source: \n> To ensure that this Plugin works with and without context, we need to add a component\n> to make the switch for us.\n\nTo get access to Stickyrolls context we need to `import { Listener } from \"@stickyroll/stickyroll\"`.  \nWith the helper of Stickyrolls `scrollTo()` we can trigger a scroll to the desired section of our app.  \nWe will use `assert()` to check if `prefix` is a `string`, when no context is being used.\n\n```jsx\nimport { Listener } from \"@stickyroll/stickyroll\";\nimport { assert, scrollTo } from \"@stickyroll/utils\";\nimport React from \"react\";\n\nexport const SkipBase = props => {\n\tconst handleClick = e => {\n\t\te.preventDefault();\n\t\tscrollTo(`${props.prefix}/skip`, e.target, {\n\t\t\tnoFocus: true, \n\t\t\tnoHash: true\n\t\t});\n\t};\n\n\treturn (\n\t\t<a\n\t\t\thref={`#${props.prefix}/skip`}\n\t\t\tonClick={handleClick}>\n\t\t\tSkip\n\t\t</a>\n\t);\n};\n\nconst Skip = props => {\n\tif (props.useContext) {\n\t\treturn (\n\t\t\t<Listener>\n\t\t\t\t{context => (\n\t\t\t\t\t<SkipBase prefix={context.anchors} />\n\t\t\t\t)}\n\t\t\t</Listener>\n\t\t);\n\t}\n\tassert(props.prefix, \"string\");\n\treturn <SkipBase prefix={props.prefix} />;\n};\n\nexport default Skip;\n```\n\nWe can now use this Plugin with or without context\n\n> :information_source: \n> Context is only available when using the child function.\n> We will talk about the render property in a later course.\n\n### 3. Using the plugin\n\nWe can now use the plugin to allow users to skip the entire view.\n\nWe need to do a few steps to use our component. \n\nImport our plugin\n\n```jsx\nimport Skip from \"./Skip\";\n```\n \nand add this new snippet\n\n```html\n<Skip useContext={true}/>\n```\n\n> :information_source:\n> If you already added anchors in \"Configure Stickyroll\", you can skip this part.\n\nNow we have to add an attribute to `Stickyroll`. \n\n```jsx\n<Stickyroll page={headlines} anchors=\"\"/>\n```\n\nSetting `anchors` injects elements with corresponding IDs to allow hash navigation.\n\n**Examples:**\n\n* `\"\"` => \"example.com#1\"\n* `\"examples\"` => \"example.com#examples/1\"\n* `\"!\"` => \"example.com#!/1\"\n* `\"!/examples\"` => \"example.com#!/examples/1\"\n\nYour `App.js` should now look like this:\n\n```jsx\nimport React from 'react';\nimport {Stickyroll} from '@stickyroll/stickyroll';\nimport PageCounter from \"./PageCounter\";\nimport ProgressCounter from \"./ProgressCounter\";\nimport Skip from \"./Skip\";\n\nconst headlines = [\n\t\"Hello World!\",\n\t\"Hello React!\",\n\t\"Hello Stickyroll!\",\n\t\"Let's continue with the next lesson!\"\n]\n\nconst App = () => {\n\treturn (\n\t\t<Stickyroll pages={headlines} anchors=\"\">\n\t\t\t{({pageIndex}) => {\n\t\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<PageCounter/>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<ProgressCounter/>\n\t\t\t\t\t<h1>{headlines[pageIndex]}</h1>\n\t\t\t\t\t<Skip useContext={true}/>\n\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}}\n\t\t</Stickyroll>\n\t)\n};\n\nexport default App;\n```\n\nEnjoy!\n\n## Next steps\n\nYou can now repeat the same process with for all other pages to allow users to jump \ndirectly to each page. The anchor targets are already set up. Using the same `scrollTo` function,\nyou can build complex navigation components.\n\nYou should now be able to do this on your own.\n\nIf anything is missing or seems unclear feel free to open an issue \nin our [github repo](https://github.com/stickyroll/react-stickyroll/issues).\n\n**Thank you**\n","contentType":"doc","path":"guide/creating-plugins/Readme.md","manifest":{"name":"it-s-time-to-learn-something-about-navigation-","displayName":"Guide: Creating Plugins","description":"Plugins can interact with your Stickyroll.","flag":"alpha","options":{"order":3},"tags":["Guide"],"version":"1.0.0"},"rawManifest":{"displayName":"Guide: Creating Plugins","description":"Plugins can interact with your Stickyroll.","tags":["Guide"],"options":{"order":3}}},{"id":"guide/getting-started/Readme","contents":"---\ndisplayName: \"Guide: Getting Started\"\ndescription: \"Stickyroll is easy to use and very intuitive.\"\ntags: \n - Guide\noptions:\n  order: 0\n---\n\n# Your kickstart into Stickyroll\n\n> :timer_clock: **Time invest**: 5 Minutes ––– :woman_student: **Level**: Beginner\n\n## What to expect\n\nBuilding scroll aware fullscreen views can be a complex process but Stickyroll is made for this\nexact purpose.\nIn about 5 minutes we will have a simple app that allows endless possibilities.\n\nWe will …\n\n* … learn how to set up a react app with `create-react-app`\n* … install Stickyroll from npm\n* … build our first scrollview\n\n## You'll need\n\n* :computer: Terminal (MacOS: `Terminal.app` or [iTerm](https://www.iterm2.com/) | Windows: [cmder](http://cmder.net/))\n* :turtle: Node.js `>=8` ([Install](https://nodejs.org/en/))\n\n\n## Installing node.js\n\nThis project requires node.js, so please make sure it is installed on your\nmachine. You can find the [downloads here](https://nodejs.org/en/download/).\n\nThis guide expects Node.js >=8.\n\n## Creating a React App\n\nTo get started with Stickyroll you need a simple react project. \nIn this guide we will use create-react-app to make easier.\n\n*The next section is quoted from the github readme of create-react-app. (Wed Dec 05 2018 23:51:26 GMT+0100 (Central European Standard Time))*\n\n> :information_source: \n> To create a new app, run a single command:\n> \n> ```sh\n> npx create-react-app my-app\n> ```\n> *(npx comes with npm 5.2+ and higher.)  \n>\n> It will create a directory called `my-app` inside the current folder.  \n> [...]\n> Once the installation is done, you can open your project folder:\n> \n> ```sh\n> cd my-app\n> ```\n> \n> [source](https://github.com/facebook/create-react-app)\n\n\n\n## Your first Stickyroll\n\nFollow these 3 simple steps to build your first Stickyroll.\n\n### 1. Installing Stickyroll\n\nWhile in your app folder `my-app`, run a single command:\n\n```shell\nnpm install --save @stickyroll/stickyroll\n```\n\n### 2. Creating a Stickyroll\n\nOpen the file `my-app/src/App.js` in your text editor and replace\nthe entire content with this code.\n\n```jsx\nimport React from 'react';\nimport {Stickyroll} from '@stickyroll/stickyroll';\n\nconst headlines = [\n\t\"Hello World!\",\n\t\"Hello React!\",\n\t\"Hello Stickyroll!\",\n\t\"Let's continue with the next lesson!\"\n]\n\nconst App = () => {\n\treturn (\n\t\t<Stickyroll pages={headlines}>\n\t\t\t{({page, pageIndex, pages, progress}) => {\n\t\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<strong>{page}</strong> of <strong>{pages}</strong>\n\t\t\t\t\t<br/>\n\t\t\t\t\tProgress: <strong>{progress}</strong>\n\t\t\t\t\t<h1>{headlines[pageIndex]}</h1>\n\n\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}}\n\t\t</Stickyroll>\n\t)\n};\n\nexport default App;\n```\n\n### 3. Starting the app\n\nTo start the app run a single command:\n\n```\nnpm start\n```\n\nThe browser should open the app. If for some reason your browser des not automatically show the app, \nsimply navigate to http://localhost:3000/ and you're good to go.\n\n`@stickyroll/stickyroll` provides the main component and a `{Listener}` to build context aware plugins.\nBut that is a topic for later. \n\n#### Explore your Stickyroll\n\nStickyroll stays in the visible area of the viewport while you scroll the page.\n\n* Try using the \"arrow down key\" on your keyboard to navigate the page.\n* The \"arrow up key\" allows you to scroll back, reverting the progress.\n* You can use the scrollbar, a mouse, trackpad or any other device to navigate the page.\n* Open the app on your mobile device and test it's behavior.\n\nYou can now add more logic to your Stickyroll.\n\nEnjoy!\n\n## Advanced usage\n\nStickyroll allows a lot more than just writing numbers on the screen. If you are\nfamiliar with React.js or are comfortable with your demo app and want\nto add custom behaviour you can take a look at the next steps in this guide.\n\nIf anything is missing or seems unclear feel free to open an issue \nin our [github repo](https://github.com/stickyroll/react-stickyroll/issues).\n\n**Thank you**\n","contentType":"doc","path":"guide/getting-started/Readme.md","manifest":{"name":"your-kickstart-into-stickyroll","displayName":"Guide: Getting Started","description":"Stickyroll is easy to use and very intuitive.","flag":"alpha","options":{"order":0},"tags":["Guide"],"version":"1.0.0"},"rawManifest":{"displayName":"Guide: Getting Started","description":"Stickyroll is easy to use and very intuitive.","tags":["Guide"],"options":{"order":0}}},{"id":"guide/index","contents":"---\nname: \"guides\"\ndescription: \"Gentle step-by-step introductions to Stickyroll\"\ndisplayName: \"Guides\"\noptions:\n  order: 1\n  query: tag=Guide AND is=doc\n---\n","contentType":"doc","path":"guide/index.md","manifest":{"name":"guides","displayName":"Guides","description":"Gentle step-by-step introductions to Stickyroll","flag":"alpha","options":{"order":1,"query":"tag=Guide AND is=doc"},"tags":[],"version":"1.0.0"},"rawManifest":{"name":"guides","description":"Gentle step-by-step introductions to Stickyroll","displayName":"Guides","options":{"order":1,"query":"tag=Guide AND is=doc"}}},{"id":"guide/using-decorators/Readme","contents":"---\ndisplayName: \"Guide: Using Decorators\"\ndescription: \"Get started with context aware plugins.\"\ntags: \n - Guide\noptions:\n  order: 2\n---\n\n# You are ready for advanced features of  Stickyroll\n\n> :timer_clock: **Time invest**: 5 Minutes ––– :woman_student: **Level**: Intermediate\n\n## What to expect\n\nSometimes it is hard to build additional features into existing libraries. Stickyroll\nprovides various options to make this very easy.\nIn about 5 minutes we will build a small PageCounter that displays the current page.\n\nWe will …\n\n* … install an additional stickyroll package\n* … create a new file with a component\n* … add the component to our existing app\n\n## You'll need\n\n* :computer: Terminal (MacOS: `Terminal.app` or [iTerm](https://www.iterm2.com/) | Windows: [cmder](http://cmder.net/))\n* :turtle: Node.js `>=8` ([Install](https://nodejs.org/en/))\n* :woman_student: The app from \"Getting Started\" or \"Configure Stickyroll\"\n\n## Building plugins with decorators\n\nFollow these 3 simple steps to build your first Plugin.\n\n### 1. Installing Decorators\n\nWhile in your app folder `my-app`, run a single command:\n\n```shell\nnpm install --save @stickyroll/decorators\n```\n\n### 2. Creating a Plugin\n\nCreate a file `my-app/src/PageCounter.js` in your text editor and paste this code.\n\n```jsx\nimport { page } from \"@stickyroll/decorators\";\nimport React from \"react\";\n\nclass PageCounter extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<strong>{this.props.page}</strong>{\" \"}\n\t\t\t\tof{\" \"}\n\t\t\t\t<strong>{this.props.pages}</strong>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default page(PageCounter);\n```\n\n### 3. Using the plugin\n\nWe can now use the plugin to replace our previously local implementation.\n\nAll we need to do is replace the following section \n\n```html\n<strong>{page}</strong> of <strong>{pages}</strong>\n```\n\nwith this new Snippet\n\n```html\n<PageCounter/>\n```\n\nand import our plugin\n\n```jsx\nimport PageCounter from \"./PageCounter\";\n```\n\nYour `App.js` should now look like this:\n\n```jsx\nimport React from 'react';\nimport {Stickyroll} from '@stickyroll/stickyroll';\nimport PageCounter from \"./PageCounter\";\n\nconst headlines = [\n\t\"Hello World!\",\n\t\"Hello React!\",\n\t\"Hello Stickyroll!\",\n\t\"Let's continue with the next lesson!\"\n]\n\nconst App = () => {\n\treturn (\n\t\t<Stickyroll pages={headlines}>\n\t\t\t{({pageIndex, progress}) => {\n\t\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<PageCounter/>\n\t\t\t\t\t<br/>\n\t\t\t\t\tProgress: <strong>{progress}</strong>\n\t\t\t\t\t<h1>{headlines[pageIndex]}</h1>\n\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}}\n\t\t</Stickyroll>\n\t)\n};\n\nexport default App;\n```\n\nEnjoy!\n\n## Next steps\n\nYou can now repeat the same process with `{progress} from \"@stickyroll/decorators\"`.\n\nIn this case we want to replace \n\n```html\nProgress: <strong>{progress}</strong>\n```\n\nwith this new snippet\n\n```html\n<ProgressCounter/>\n```\n\nYou should now be able to do this on your own.\n\nIf anything is missing or seems unclear feel free to open an issue \nin our [github repo](https://github.com/stickyroll/react-stickyroll/issues).\n\n**Thank you**\n","contentType":"doc","path":"guide/using-decorators/Readme.md","manifest":{"name":"you-are-ready-for-advanced-features-of--stickyroll","displayName":"Guide: Using Decorators","description":"Get started with context aware plugins.","flag":"alpha","options":{"order":2},"tags":["Guide"],"version":"1.0.0"},"rawManifest":{"displayName":"Guide: Using Decorators","description":"Get started with context aware plugins.","tags":["Guide"],"options":{"order":2}}}],"type":"root"},"meta":{"id":"root","children":[{"id":"configure-stickyroll","artifact":"guide/configue-stickyroll/demo.js","contents":"---\ndisplayName: \"Guide: Configure Stickyroll\"\ndescription: \"Modify the behavior of Stickyroll.\"\ntags: \n - Guide\noptions:\n  order: 1\n---\n\n# When the default behavior is not enough.\n\n> :timer_clock: **Time invest**: 5 Minutes ––– :woman_student: **Level**: Beginner\n\n## What to expect\n\nEvery application can have several use cases for Stickyroll. With some basic options we can modify\nthe behavior of the scroll listener.\nIn about 5 minutes we will explore the `factor`, `throttle` and `anchors` properties.\n\nWe will …\n\n* … Change the scroll factor\n* … Use throttle to improve performance\n* … Add anchors to allow deep linking to a page\n\n## You'll need\n\n* :computer: Terminal (MacOS: `Terminal.app` or [iTerm](https://www.iterm2.com/) | Windows: [cmder](http://cmder.net/))\n* :turtle: Node.js `>=8` ([Install](https://nodejs.org/en/))\n* :woman_student: The app from \"Getting started\"\n\n## Using Options to modify Stickyroll\n\nFollow these 3 simple steps to learn all the possibilities.\n\n### 1. Change the factor\n\nTo change the amount, a user has to scroll to progress though the view can be configured.\nIn this example we want to double the amount so the timeline is longer.\n\nWe have add an attribute to `Stickyroll`.\n\n```jsx\n<Stickyroll page={headlines} factor={2}/>\n```\n\nPlay around with this option until you have the effect that suits you best.\n\n### 2. Add throttle\n\nSometimes performance is more important than smooth animations.\nWhile Stickyroll already uses `requestAnimationFrame` internally on top of a\npassive `eventListener`, performance should not be an issue. Obviously the internal logic of your\napplication has the most impact.\n\nLet's pretend to have a case where we can to throttle the scroll to `250ms`.  \nIf all we do on scroll is trigger a className at a certain progress, then `throttle`\nmight do exactly what we want.\n\nWe have add an attribute to `Stickyroll`.\n\n```jsx\n<Stickyroll page={headlines} factor={2} throttle={250}/>\n```\n\nand change the className of our content container based on the progress.  \nLets add `custom-trigger--${Math.round(progress * 3)}` to add 3 classNames\nwhile scrolling\n\n* \"custom-trigger--0\"  (Start of page)\n* \"custom-trigger--...\"\n* \"custom-trigger--3\" (End of page)\n\n```html\n<div className={`custom-trigger--${Math.round(progress * 3)}`}/>\n```\n\nYou can add these Styles to your stylesheet if you want to see some action:\n\n> :information_source: \n> You can use [styled-components](https://www.styled-components.com/) or a similar library\n> to add these styles for you.  \n> To keep things simple we will just add them to the `document.head` manually\n\n```js\nArray(4).fill(Boolean).map((x, i) => `\n\t.custom-trigger {\n\t\ttransition: background-color 0.3s ease-in-out;\n\t}\n\t.custom-trigger--${i} {\n\t\tbackground-color: hsl(${i * 36}, 100%, 70%);\n\t}\n`);\n```\n\nOpen the file `my-app/src/App.css` in your text editor and add this\ncss snippet\n\n```css\n.custom-trigger {\n\ttransition: background-color 0.3s ease-in-out;\n}\n.custom-trigger--0{\n\tbackground-color:hsl(0,100%,70%);\n}\n.custom-trigger--1{\n\tbackground-color:hsl(120,100%,70%);\n}\n.custom-trigger--2{\n\tbackground-color:hsl(240,100%,70%);\n}\n.custom-trigger--3{\n\tbackground-color:hsl(360,100%,70%);\n}\n```\n\n> :information_source: \n> Throttle will improve performance but return a stuttering `progress`.\n\n### 3. Adding deep links\n\nTo allow linking directly to pages we can inject elements with target IDs.\nWhile you are free to build your own Logic for this, Stickyroll already provides\na solution that nicely ties into the mechanism.\n\nWe have to add an attribute to `Stickyroll`.\n\n```jsx\n<Stickyroll page={headlines} anchors=\"\"/>\n```\n\nSetting `anchors` injects elements with corresponding IDs to allow hash navigation.\n\n**Examples:**\n\n* `\"\"` => \"example.com#1\"\n* `\"examples\"` => \"example.com#examples/1\"\n* `\"!\"` => \"example.com#!/1\"\n* `\"!/examples\"` => \"example.com#!/examples/1\"\n\n\nYour `App.js` should now look like this:\n\n```jsx\nimport React from 'react';\nimport {Stickyroll} from '@stickyroll/stickyroll';\n\nconst headlines = [\n\t\"Hello World!\",\n\t\"Hello React!\",\n\t\"Hello Stickyroll!\",\n\t\"Let's continue with the next lesson!\"\n]\n\nconst App = () => {\n\tconst className = progress =>\n\t\t`custom-trigger custom-trigger--${Math.round(progress * 3)}`\n\treturn (\n\t\t<Stickyroll\n\t\t\tpages={headlines}\n\t\t\tfactor={2}\n\t\t\tthrottle={250\n\t\t\tanchors=\"\">\n\t\t\t{({page, pageIndex, pages, progress}) => {\n\t\t\t\treturn (\n\t\t\t\t<div\n\t\t\t\t\tclassName={className(progress)}/>\n\t\t\t\t\t<strong>{page}</strong> of <strong>{pages}</strong>\n\t\t\t\t\t<br/>\n\t\t\t\t\tProgress: <strong>{progress}</strong>\n\t\t\t\t\t<h1>{headlines[pageIndex]}</h1>\n\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}}\n\t\t</Stickyroll>\n\t)\n};\n\nexport default App;\n```\n\nYour `App.css` should now look like this:\n\n```css\n.App {\n  text-align: center;\n}\n\n.App-logo {\n  animation: App-logo-spin infinite 20s linear;\n  height: 40vmin;\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.custom-trigger {\n  transition: background-color 0.3s ease-in-out;\n}\n.custom-trigger--0{\n  background-color:hsl(0,100%,70%);\n}\n.custom-trigger--1{\n  background-color:hsl(120,100%,70%);\n}\n.custom-trigger--2{\n  background-color:hsl(240,100%,70%);\n}\n.custom-trigger--3{\n  background-color:hsl(360,100%,70%);\n}\n```\n\nEnjoy!\n\n## Next steps\n\nThese options are fully optional. It's noe time to take a step to the next level\nand explore more internal features of Stickyroll.\n\n\nIf anything is missing or seems unclear feel free to open an issue \nin our [github repo](https://github.com/stickyroll/react-stickyroll/issues).\n\n**Thank you**\n","contentType":"pattern","source":"guide/configue-stickyroll/demo.js","files":["guide/configue-stickyroll/demo.js","guide/configue-stickyroll/lib","guide/configue-stickyroll/node_modules","guide/configue-stickyroll/Readme.md","guide/configue-stickyroll/src","guide/configue-stickyroll/tsconfig.json"],"path":"guide/configue-stickyroll/package.json","manifest":{"displayName":"Example: Configure Stickyroll","version":"1.0.0","build":true,"display":true,"flag":"alpha","options":{},"name":"configure-stickyroll","description":"","tags":[]},"rawManifest":{"name":"configure-stickyroll","displayName":"Example: Configure Stickyroll","description":"","flag":"","options":{},"tags":[],"version":"1.0.0"},"errors":[]},{"id":"cretaing-plugins","artifact":"guide/creating-plugins/demo.js","contents":"---\ndisplayName: \"Guide: Creating Plugins\"\ndescription: \"Plugins can interact with your Stickyroll.\"\ntags: \n - Guide\noptions:\n  order: 3\n---\n\n# It's time to learn something about navigation.\n\n> :timer_clock: **Time invest**: 10 Minutes ––– :woman_student: **Level**: Intermediate\n\n## What to expect\n\nInteracting with timeline based libraries can be tricky. Learn how Stickyroll uses\nhash-links to allow easy navigation.\nIn about 10 minutes we will build a small Skip Component that allows us to skip the entire view.\n\nWe will …\n\n* … install an additional stickyroll package\n* … create a new file with a component\n* … add the component to our existing app\n\n## You'll need\n\n* :computer: Terminal (MacOS: `Terminal.app` or [iTerm](https://www.iterm2.com/) | Windows: [cmder](http://cmder.net/))\n* :turtle: Node.js `>=8` ([Install](https://nodejs.org/en/))\n* :woman_student: The app from \"Using Decorators\"\n\n## Building plugins with context and utils\n\nFollow these 3 simple steps to build your first Plugin.\n\n### 1. Installing Utils\n\nWhile in your app folder `my-app`, run a single command:\n\n```shell\nnpm install --save @stickyroll/utils\n```\n\n### 2. Creating a Plugin\n\nCreate a file `my-app/src/Skip.js` in your text editor and paste this code.\nThis creates a simple Link that allows users to skip the entire Content.  \n\n> :information_source: \n> To ensure that this Plugin works with and without context, we need to add a component\n> to make the switch for us.\n\nTo get access to Stickyrolls context we need to `import { Listener } from \"@stickyroll/stickyroll\"`.  \nWith the helper of Stickyrolls `scrollTo()` we can trigger a scroll to the desired section of our app.  \nWe will use `assert()` to check if `prefix` is a `string`, when no context is being used.\n\n```jsx\nimport { Listener } from \"@stickyroll/stickyroll\";\nimport { assert, scrollTo } from \"@stickyroll/utils\";\nimport React from \"react\";\n\nexport const SkipBase = props => {\n\tconst handleClick = e => {\n\t\te.preventDefault();\n\t\tscrollTo(`${props.prefix}/skip`, e.target, {\n\t\t\tnoFocus: true, \n\t\t\tnoHash: true\n\t\t});\n\t};\n\n\treturn (\n\t\t<a\n\t\t\thref={`#${props.prefix}/skip`}\n\t\t\tonClick={handleClick}>\n\t\t\tSkip\n\t\t</a>\n\t);\n};\n\nconst Skip = props => {\n\tif (props.useContext) {\n\t\treturn (\n\t\t\t<Listener>\n\t\t\t\t{context => (\n\t\t\t\t\t<SkipBase prefix={context.anchors} />\n\t\t\t\t)}\n\t\t\t</Listener>\n\t\t);\n\t}\n\tassert(props.prefix, \"string\");\n\treturn <SkipBase prefix={props.prefix} />;\n};\n\nexport default Skip;\n```\n\nWe can now use this Plugin with or without context\n\n> :information_source: \n> Context is only available when using the child function.\n> We will talk about the render property in a later course.\n\n### 3. Using the plugin\n\nWe can now use the plugin to allow users to skip the entire view.\n\nWe need to do a few steps to use our component. \n\nImport our plugin\n\n```jsx\nimport Skip from \"./Skip\";\n```\n \nand add this new snippet\n\n```html\n<Skip useContext={true}/>\n```\n\n> :information_source:\n> If you already added anchors in \"Configure Stickyroll\", you can skip this part.\n\nNow we have to add an attribute to `Stickyroll`. \n\n```jsx\n<Stickyroll page={headlines} anchors=\"\"/>\n```\n\nSetting `anchors` injects elements with corresponding IDs to allow hash navigation.\n\n**Examples:**\n\n* `\"\"` => \"example.com#1\"\n* `\"examples\"` => \"example.com#examples/1\"\n* `\"!\"` => \"example.com#!/1\"\n* `\"!/examples\"` => \"example.com#!/examples/1\"\n\nYour `App.js` should now look like this:\n\n```jsx\nimport React from 'react';\nimport {Stickyroll} from '@stickyroll/stickyroll';\nimport PageCounter from \"./PageCounter\";\nimport ProgressCounter from \"./ProgressCounter\";\nimport Skip from \"./Skip\";\n\nconst headlines = [\n\t\"Hello World!\",\n\t\"Hello React!\",\n\t\"Hello Stickyroll!\",\n\t\"Let's continue with the next lesson!\"\n]\n\nconst App = () => {\n\treturn (\n\t\t<Stickyroll pages={headlines} anchors=\"\">\n\t\t\t{({pageIndex}) => {\n\t\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<PageCounter/>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<ProgressCounter/>\n\t\t\t\t\t<h1>{headlines[pageIndex]}</h1>\n\t\t\t\t\t<Skip useContext={true}/>\n\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}}\n\t\t</Stickyroll>\n\t)\n};\n\nexport default App;\n```\n\nEnjoy!\n\n## Next steps\n\nYou can now repeat the same process with for all other pages to allow users to jump \ndirectly to each page. The anchor targets are already set up. Using the same `scrollTo` function,\nyou can build complex navigation components.\n\nYou should now be able to do this on your own.\n\nIf anything is missing or seems unclear feel free to open an issue \nin our [github repo](https://github.com/stickyroll/react-stickyroll/issues).\n\n**Thank you**\n","contentType":"pattern","source":"guide/creating-plugins/demo.js","files":["guide/creating-plugins/demo.js","guide/creating-plugins/lib","guide/creating-plugins/node_modules","guide/creating-plugins/Readme.md","guide/creating-plugins/src","guide/creating-plugins/tsconfig.json"],"path":"guide/creating-plugins/package.json","manifest":{"displayName":"Example: Creating Plugins","version":"1.0.0","build":true,"display":true,"flag":"alpha","options":{},"name":"cretaing-plugins","description":"","tags":[]},"rawManifest":{"name":"cretaing-plugins","displayName":"Example: Creating Plugins","description":"","flag":"","options":{},"tags":[],"version":"1.0.0"},"errors":[]},{"id":"getting-started","artifact":"guide/getting-started/demo.js","contents":"---\ndisplayName: \"Guide: Getting Started\"\ndescription: \"Stickyroll is easy to use and very intuitive.\"\ntags: \n - Guide\noptions:\n  order: 0\n---\n\n# Your kickstart into Stickyroll\n\n> :timer_clock: **Time invest**: 5 Minutes ––– :woman_student: **Level**: Beginner\n\n## What to expect\n\nBuilding scroll aware fullscreen views can be a complex process but Stickyroll is made for this\nexact purpose.\nIn about 5 minutes we will have a simple app that allows endless possibilities.\n\nWe will …\n\n* … learn how to set up a react app with `create-react-app`\n* … install Stickyroll from npm\n* … build our first scrollview\n\n## You'll need\n\n* :computer: Terminal (MacOS: `Terminal.app` or [iTerm](https://www.iterm2.com/) | Windows: [cmder](http://cmder.net/))\n* :turtle: Node.js `>=8` ([Install](https://nodejs.org/en/))\n\n\n## Installing node.js\n\nThis project requires node.js, so please make sure it is installed on your\nmachine. You can find the [downloads here](https://nodejs.org/en/download/).\n\nThis guide expects Node.js >=8.\n\n## Creating a React App\n\nTo get started with Stickyroll you need a simple react project. \nIn this guide we will use create-react-app to make easier.\n\n*The next section is quoted from the github readme of create-react-app. (Wed Dec 05 2018 23:51:26 GMT+0100 (Central European Standard Time))*\n\n> :information_source: \n> To create a new app, run a single command:\n> \n> ```sh\n> npx create-react-app my-app\n> ```\n> *(npx comes with npm 5.2+ and higher.)  \n>\n> It will create a directory called `my-app` inside the current folder.  \n> [...]\n> Once the installation is done, you can open your project folder:\n> \n> ```sh\n> cd my-app\n> ```\n> \n> [source](https://github.com/facebook/create-react-app)\n\n\n\n## Your first Stickyroll\n\nFollow these 3 simple steps to build your first Stickyroll.\n\n### 1. Installing Stickyroll\n\nWhile in your app folder `my-app`, run a single command:\n\n```shell\nnpm install --save @stickyroll/stickyroll\n```\n\n### 2. Creating a Stickyroll\n\nOpen the file `my-app/src/App.js` in your text editor and replace\nthe entire content with this code.\n\n```jsx\nimport React from 'react';\nimport {Stickyroll} from '@stickyroll/stickyroll';\n\nconst headlines = [\n\t\"Hello World!\",\n\t\"Hello React!\",\n\t\"Hello Stickyroll!\",\n\t\"Let's continue with the next lesson!\"\n]\n\nconst App = () => {\n\treturn (\n\t\t<Stickyroll pages={headlines}>\n\t\t\t{({page, pageIndex, pages, progress}) => {\n\t\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<strong>{page}</strong> of <strong>{pages}</strong>\n\t\t\t\t\t<br/>\n\t\t\t\t\tProgress: <strong>{progress}</strong>\n\t\t\t\t\t<h1>{headlines[pageIndex]}</h1>\n\n\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}}\n\t\t</Stickyroll>\n\t)\n};\n\nexport default App;\n```\n\n### 3. Starting the app\n\nTo start the app run a single command:\n\n```\nnpm start\n```\n\nThe browser should open the app. If for some reason your browser des not automatically show the app, \nsimply navigate to http://localhost:3000/ and you're good to go.\n\n`@stickyroll/stickyroll` provides the main component and a `{Listener}` to build context aware plugins.\nBut that is a topic for later. \n\n#### Explore your Stickyroll\n\nStickyroll stays in the visible area of the viewport while you scroll the page.\n\n* Try using the \"arrow down key\" on your keyboard to navigate the page.\n* The \"arrow up key\" allows you to scroll back, reverting the progress.\n* You can use the scrollbar, a mouse, trackpad or any other device to navigate the page.\n* Open the app on your mobile device and test it's behavior.\n\nYou can now add more logic to your Stickyroll.\n\nEnjoy!\n\n## Advanced usage\n\nStickyroll allows a lot more than just writing numbers on the screen. If you are\nfamiliar with React.js or are comfortable with your demo app and want\nto add custom behaviour you can take a look at the next steps in this guide.\n\nIf anything is missing or seems unclear feel free to open an issue \nin our [github repo](https://github.com/stickyroll/react-stickyroll/issues).\n\n**Thank you**\n","contentType":"pattern","source":"guide/getting-started/demo.js","files":["guide/getting-started/demo.js","guide/getting-started/lib","guide/getting-started/node_modules","guide/getting-started/Readme.md","guide/getting-started/src","guide/getting-started/tsconfig.json"],"path":"guide/getting-started/package.json","manifest":{"displayName":"Example: Getting Started","version":"1.0.0","build":true,"display":true,"flag":"alpha","options":{},"name":"getting-started","description":"","tags":[]},"rawManifest":{"name":"getting-started","displayName":"Example: Getting Started","description":"","flag":"","options":{},"tags":[],"version":"1.0.0"},"errors":[]},{"id":"using-decorators","artifact":"guide/using-decorators/demo.js","contents":"---\ndisplayName: \"Guide: Using Decorators\"\ndescription: \"Get started with context aware plugins.\"\ntags: \n - Guide\noptions:\n  order: 2\n---\n\n# You are ready for advanced features of  Stickyroll\n\n> :timer_clock: **Time invest**: 5 Minutes ––– :woman_student: **Level**: Intermediate\n\n## What to expect\n\nSometimes it is hard to build additional features into existing libraries. Stickyroll\nprovides various options to make this very easy.\nIn about 5 minutes we will build a small PageCounter that displays the current page.\n\nWe will …\n\n* … install an additional stickyroll package\n* … create a new file with a component\n* … add the component to our existing app\n\n## You'll need\n\n* :computer: Terminal (MacOS: `Terminal.app` or [iTerm](https://www.iterm2.com/) | Windows: [cmder](http://cmder.net/))\n* :turtle: Node.js `>=8` ([Install](https://nodejs.org/en/))\n* :woman_student: The app from \"Getting Started\" or \"Configure Stickyroll\"\n\n## Building plugins with decorators\n\nFollow these 3 simple steps to build your first Plugin.\n\n### 1. Installing Decorators\n\nWhile in your app folder `my-app`, run a single command:\n\n```shell\nnpm install --save @stickyroll/decorators\n```\n\n### 2. Creating a Plugin\n\nCreate a file `my-app/src/PageCounter.js` in your text editor and paste this code.\n\n```jsx\nimport { page } from \"@stickyroll/decorators\";\nimport React from \"react\";\n\nclass PageCounter extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<strong>{this.props.page}</strong>{\" \"}\n\t\t\t\tof{\" \"}\n\t\t\t\t<strong>{this.props.pages}</strong>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default page(PageCounter);\n```\n\n### 3. Using the plugin\n\nWe can now use the plugin to replace our previously local implementation.\n\nAll we need to do is replace the following section \n\n```html\n<strong>{page}</strong> of <strong>{pages}</strong>\n```\n\nwith this new Snippet\n\n```html\n<PageCounter/>\n```\n\nand import our plugin\n\n```jsx\nimport PageCounter from \"./PageCounter\";\n```\n\nYour `App.js` should now look like this:\n\n```jsx\nimport React from 'react';\nimport {Stickyroll} from '@stickyroll/stickyroll';\nimport PageCounter from \"./PageCounter\";\n\nconst headlines = [\n\t\"Hello World!\",\n\t\"Hello React!\",\n\t\"Hello Stickyroll!\",\n\t\"Let's continue with the next lesson!\"\n]\n\nconst App = () => {\n\treturn (\n\t\t<Stickyroll pages={headlines}>\n\t\t\t{({pageIndex, progress}) => {\n\t\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<PageCounter/>\n\t\t\t\t\t<br/>\n\t\t\t\t\tProgress: <strong>{progress}</strong>\n\t\t\t\t\t<h1>{headlines[pageIndex]}</h1>\n\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}}\n\t\t</Stickyroll>\n\t)\n};\n\nexport default App;\n```\n\nEnjoy!\n\n## Next steps\n\nYou can now repeat the same process with `{progress} from \"@stickyroll/decorators\"`.\n\nIn this case we want to replace \n\n```html\nProgress: <strong>{progress}</strong>\n```\n\nwith this new snippet\n\n```html\n<ProgressCounter/>\n```\n\nYou should now be able to do this on your own.\n\nIf anything is missing or seems unclear feel free to open an issue \nin our [github repo](https://github.com/stickyroll/react-stickyroll/issues).\n\n**Thank you**\n","contentType":"pattern","source":"guide/using-decorators/demo.js","files":["guide/using-decorators/demo.js","guide/using-decorators/lib","guide/using-decorators/node_modules","guide/using-decorators/Readme.md","guide/using-decorators/src","guide/using-decorators/tsconfig.json"],"path":"guide/using-decorators/package.json","manifest":{"displayName":"Example: Using Decorators","version":"1.0.0","build":true,"display":true,"flag":"alpha","options":{},"name":"using-decorators","description":"","tags":[]},"rawManifest":{"name":"using-decorators","displayName":"Example: Using Decorators","description":"","flag":"","options":{},"tags":[],"version":"1.0.0"},"errors":[]}]}}